install.packages("mlbench")
library(mlbench)
data(Glass)
str(Glass)
View(Glass)
plot(Glass$Na)
hist(Glass$Na)
library(mlbench)
data(Glass)
str(Glass)
par(mfrow=c(3,3))
hist(Glass$RI)
hist(Glass$Na)
hist(Glass$Mg)
hist(Glass$Al)
hist(Glass$Si)
hist(Glass$K)
hist(Glass$Ca)
hist(Glass$Ba)
hist(Glass$Fe)
par(mfrow=c(3,3))
hist(Glass$RI, main = 'Distribution of RI')
hist(Glass$Na, main = 'Distribution of Na')
hist(Glass$Mg, main = 'Distribution of Mg')
hist(Glass$Al, main = 'Distribution of Al')
hist(Glass$Si, main = 'Distribution of Si')
hist(Glass$K, main = 'Distribution of K')
hist(Glass$Ca, main = 'Distribution of Ca')
hist(Glass$Ba, main = 'Distribution of Ba')
hist(Glass$Fe, main = 'Distribution of Fe')
par(mfrow=c(3,3))
hist(Glass$RI, main = 'Distribution of RI')
hist(Glass$Na, main = 'Distribution of Na')
hist(Glass$Mg, main = 'Distribution of Mg')
hist(Glass$Al, main = 'Distribution of Al')
hist(Glass$Si, main = 'Distribution of Si')
hist(Glass$K, main = 'Distribution of K')
hist(Glass$Ca, main = 'Distribution of Ca')
hist(Glass$Ba, main = 'Distribution of Ba')
hist(Glass$Fe, main = 'Distribution of Fe')
install.packages("corrplot")
library(mlbench)
library(corrplot)
corrplot(Glass, method = "color")
glass.corr <- cor(Glass)
class(Glass)
glass.matrix <- data.matrix(Glass, rownames.force = NA)
glass.corr <- cor(Glass)
glass.matrix <- data.matrix(Glass, rownames.force = NA)
glass.corr <- cor(glass.matrix)
corrplot(glass.corr, method = "color")
data(Soybean)
## See ?Soybean for details
View(Soybean)
par(mfrow=c(3,3))
boxplot(Glass$RI, main = 'Distribution of RI')
boxplot(Glass$Na, main = 'Distribution of Na')
boxplot(Glass$Mg, main = 'Distribution of Mg')
boxplot(Glass$Al, main = 'Distribution of Al')
boxplot(Glass$Si, main = 'Distribution of Si')
boxplot(Glass$K, main = 'Distribution of K')
boxplot(Glass$Ca, main = 'Distribution of Ca')
boxplot(Glass$Ba, main = 'Distribution of Ba')
boxplot(Glass$Fe, main = 'Distribution of Fe')
par(mfrow=c(3,3))
boxplot(Glass$RI, main = 'BoxPlot of RI')
boxplot(Glass$Na, main = 'BoxPlot of Na')
boxplot(Glass$Mg, main = 'BoxPlot of Mg')
boxplot(Glass$Al, main = 'BoxPlot of Al')
boxplot(Glass$Si, main = 'BoxPlot of Si')
boxplot(Glass$K, main = 'BoxPlot of K')
boxplot(Glass$Ca, main = 'BoxPlot of Ca')
boxplot(Glass$Ba, main = 'BoxPlot of Ba')
boxplot(Glass$Fe, main = 'BoxPlot of Fe')
data(Soybean)
## See ?Soybean for details
str(Soybean)
install.packages(amerlia)
install.packages("amerlia")
install.packages("amelia")
install.packages("Amelia")
library(mlbench)
library(corrplot)
library(Amelia)
missing(Soybean)
missmap(Soybean)
len(colnames(Soybean))
length(colnames(Soybean))
length(Soybean)
for(i in 1:length(Soybean)){
hist(Soybean[,i])
}
for(i in 2:length(Soybean)){
hist(Soybean[,i])
}
for(i in 1:length(Glass)){
hist(Glass[,i])
}
for(i in 1:length(Glass)){
#hist(Glass[,i])
print(class(Glass[,i]))
}
for(i in 1:length(Glass)){
#hist(Glass[,i])
print(class(Glass[,i]))
hist(Glass[,i])
}
for(i in 1:length(Soybean)){
#hist(Glass[,i])
print(class(Soybean[,i]))
hist(Soybean[,i])
}
for(i in 1:length(Soybean)){
if (is.numeric(Soybean[,i])) {
print(class(Soybean[,i]))
}
#hist(Soybean[,i])
}
for(i in 1:length(Soybean)){
if (is.numeric(class(Soybean[,i]))) {
print(class(Soybean[,i]))
}
#hist(Soybean[,i])
}
numeric.columns <- unlist(lapply(Soybean, is.numeric))
numeric.soybean <- Soybean[, numeric.columns]
str(numeric.soybean)
install.packages("purrr")
install.packages("tidyr")
install.packages("ggplot2")
library(mlbench)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(Amelia)
Glass %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
Glass %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_boxplot()
par(mfrow=c(3,3))
boxplot(Glass$RI, main = 'BoxPlot of RI')
boxplot(Glass$Na, main = 'BoxPlot of Na')
boxplot(Glass$Mg, main = 'BoxPlot of Mg')
boxplot(Glass$Al, main = 'BoxPlot of Al')
boxplot(Glass$Si, main = 'BoxPlot of Si')
boxplot(Glass$K, main = 'BoxPlot of K')
boxplot(Glass$Ca, main = 'BoxPlot of Ca')
boxplot(Glass$Ba, main = 'BoxPlot of Ba')
boxplot(Glass$Fe, main = 'BoxPlot of Fe')
Glass %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_boxplot() +
coord_flip()
Glass %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_boxplot(outlier.color = "red") +
coord_flip()
glass.matrix <- data.matrix(Glass, rownames.force = NA)
glass.corr <- cor(glass.matrix)
corrplot(glass.corr, method = "color")
Soybean %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
data(Soybean)
## See ?Soybean for details
str(Soybean)
Soybean %>%
transform(Soybean, class = as.numeric(as.factor(Soybean)))
asNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
asNumeric))
Soybean %>%
factorsNumeric() %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
data(Soybean)
## See ?Soybean for details
str(Soybean)
Soybean %>%
select(-Class) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
install.packages("dplyr")
install.packages("dplyr")
library(mlbench)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(dplyr)
library(Amelia)
Soybean %>%
select(-Class) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
Soybean %>%
select(-Class) %>%
gather() %>%
ggplot(aes(value)) +
geom_bar() +
facet_wrap(~ key, scales = "free") +
geom_histogram()
Soybean %>%
select(-Class) %>%
gather() %>%
ggplot(aes(value)) +
#geom_bar() +
facet_wrap(~ key +
geom_histogram()
Soybean %>%
select(-Class) %>%
gather() %>%
ggplot(aes(value)) +
#geom_bar() +
facet_wrap(~ key) +
geom_histogram()
Soybean %>%
select(-Class) %>%
gather() %>%
ggplot(aes(value)) +
geom_bar() +
facet_wrap(~ key) +
geom_histogram()
Soybean %>%
select(-Class)%>%
#Gather the column into row, so the table only includes key and value
gather() %>%
ggplot(aes(value)) +geom_bar()+facet_wrap(~ key) +ggtitle("Distribution of Soybean Predictors")
Soybean %>%
select(-Class) %>%
gather() %>%
ggplot(aes(value)) +
geom_bar() +
facet_wrap(~ key)
missmap(Soybean)
install.packages("Caret")
missmap(Soybean)
install.packages("caret")
install.packages("caret")
library(mlbench)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(dplyr)
library(caret)
library(generics)
detach("package:generics", unload = TRUE)
update.packages("generics")
library(mlbench)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(dplyr)
library(caret)
library(mlbench)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(dplyr)
library(caret)
library(Amelia)
data(Glass)
str(Glass)
Glass %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
Glass %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_boxplot(outlier.color = "red") +
coord_flip()
glass.matrix <- data.matrix(Glass, rownames.force = NA)
glass.corr <- cor(glass.matrix)
corrplot(glass.corr, method = "color")
data(Soybean)
## See ?Soybean for details
str(Soybean)
Soybean %>%
select(-Class) %>%
gather() %>%
ggplot(aes(value)) +
geom_bar() +
facet_wrap(~ key)
nearZeroVar(Soybean)
nearZeroVar(Soybean)
Soybean[,19]
nearZeroVar(Soybean)
colnames(Soybean)[19]
colnames(Soybean)[19]
colnames(Soybean)[26]
colnames(Soybean)[28]
missmap(Soybean)
for(i in nearZeroVar(Soybean)) {
print(i)
}
for(i in nearZeroVar(Soybean)) {
print(colnames(Soybean[i])
}
for(i in nearZeroVar(Soybean)) {
print(colnames(Soybean[i]))
}
nzv <- c()
for(i in nearZeroVar(Soybean)) {
print(colnames(Soybean[i]))
nzv <- c(nzv, i)
}
nzv
nzv <- c()
for(i in nearZeroVar(Soybean)) {
nzv <- c(nzv, colnames(Soybean[i]))
}
nzv
install.packages(bnstruct)
install.packages("bnstruct")
library(mlbench)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(dplyr)
library(caret)
library(Amelia)
library(bnstruct)
knn.impute(Soybean)
knn.impute(Soybean, k = 5)
install.packages("impute")
install.packages("impute")
install.packages("DMwR")
library(DMwR)
knnImputation(Soybean)
preprocess.strat <- function(df) {
nzv <- c()
for(i in nearZeroVar(Soybean)) {
nzv <- c(nzv, colnames(Soybean[i]))
}
df <- df[,-nzv]
df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
preprocess.strat <- function(df) {
nzv <- c()
for(i in nearZeroVar(Soybean)) {
nzv <- c(nzv, colnames(Soybean[i]))
}
df <- subset(df, select = - nzv)
df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
nzv
class(nzv)
preprocess.strat <- function(df) {
nzv <- list()
for(i in nearZeroVar(Soybean)) {
nzv <- c(nzv, colnames(Soybean[i]))
}
df <- subset(df, select = - nzv)
df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
preprocess.strat <- function(df) {
#nzv <- list()
for(i in nearZeroVar(Soybean)) {
df <- subset(df, select = -colnames(Soybean[i]))
#nzv <- c(nzv, colnames(Soybean[i]))
}
#df <- subset(df, select = - nzv)
#df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
preprocess.strat <- function(df) {
nzv <- list()
for(i in nearZeroVar(df)) {
nzv <- c(nzv, colnames(df[i]))
}
df <- subset(df, select = - nzv)
df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
preprocess.strat <- function(df) {
#nzv <- list()
for(i in nearZeroVar(df)) {
df <- subset(df, select = -colnames(df[i]))
#nzv <- c(nzv, colnames(df[i]))
}
#df <- subset(df, select = - nzv)
#df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
preprocess.strat <- function(df) {
#nzv <- list()
for(i in nearZeroVar(df)) {
df <- df[-c(i)]#subset(df, select = -colnames(df[i]))
#nzv <- c(nzv, colnames(df[i]))
}
#df <- subset(df, select = - nzv)
#df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
soybean.impute
colnames(soybean.impute)
preprocess.strat <- function(df) {
for(i in nearZeroVar(df)) {
df <- df[-c(i)]#subset(df, select = -colnames(df[i]))
}
df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
str(soybean.impute)
soybean.impute <- preprocess.strat(Soybean)
preprocess.strat <- function(df) {
for(i in nearZeroVar(df)) {
df <- df[-c(i)]
}
df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
preprocess.strat <- function(df) {
for(i in nearZeroVar(df)) {
df <- df[-c(i)]
}
lapply(df, as.numeric)
df <- knn.impute(df)
return(df)
}
soybean.impute <- preprocess.strat(Soybean)
lapply(Soybean, as.numeric)
#soybean.impute <- preprocess.strat(Soybean)
missmap(soybean.impute)
preprocess.strat <- function(df) {
for(i in nearZeroVar(df)) {
df <- df[-c(i)]
}
a <- array(0, dim=dim(df))
for (i in 1:ncol(df)) {
a[,i] <- X[,i]}
df <- knn.impute(df)
return(df)
}
a <- array(0, dim=dim(X))
for (i in 1:ncol(X)) {a[,i] <- X[,i]}
a <- array(0, dim=dim(Soybean))
for (i in 1:ncol(Soybean)) {a[,i] <- X[,i]}
a <- array(0, dim=dim(Soybean))
for (i in 1:ncol(Soybean)) {a[,i] <- Soybean[,i]}
a
preprocess.strat <- function(df) {
for(i in nearZeroVar(df)) {
df <- df[-c(i)]
}
df <- array(0, dim=dim(df))
for (i in 1:ncol(df)) {
a[,i] <-df[,i]}
df <- knn.impute(df)
return(df)
}
#soybean.impute <- preprocess.strat(Soybean)
missmap(soybean.impute)
soybean.impute <- preprocess.strat(Soybean)
#missmap(soybean.impute)
soybean.impute <- preprocess.strat(Soybean)
missmap(soybean.impute)
View(soybean.impute)
